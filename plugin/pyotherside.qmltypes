import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable io.thp.pyotherside 1.5'

Module {
    dependencies: []
    Component {
        name: "PyFbo"
        defaultProperty: "data"
        prototype: "QQuickFramebufferObject"
        exports: ["io.thp.pyotherside/PyFBO 1.5"]
        exportMetaObjectRevisions: [0]
        Property { name: "renderer"; type: "QVariant" }
    }
    Component {
        name: "PyGLArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["io.thp.pyotherside/PyGLArea 1.5"]
        exportMetaObjectRevisions: [0]
        Property { name: "renderer"; type: "QVariant" }
        Property { name: "before"; type: "bool" }
        Method { name: "sync" }
        Method { name: "update" }
    }
    Component {
        name: "QPython"
        prototype: "QObject"
        Signal {
            name: "received"
            Parameter { name: "data"; type: "QVariant" }
        }
        Signal {
            name: "error"
            Parameter { name: "traceback"; type: "string" }
        }
        Signal {
            name: "process"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "unboxed_args"; type: "QVariant" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
        }
        Signal {
            name: "import"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
        }
        Signal {
            name: "import_names"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "args"; type: "QVariant" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
        }
        Method {
            name: "addImportPath"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "setHandler"
            Parameter { name: "event"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "evaluate"
            type: "QVariant"
            Parameter { name: "expr"; type: "string" }
        }
        Method {
            name: "importNames"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "args"; type: "QVariant" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "importNames_sync"
            type: "bool"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "args"; type: "QVariant" }
        }
        Method {
            name: "importModule"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "importModule_sync"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "call"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "args"; type: "QVariant" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "call"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "args"; type: "QVariant" }
        }
        Method {
            name: "call"
            Parameter { name: "func"; type: "QVariant" }
        }
        Method {
            name: "call_sync"
            type: "QVariant"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "boxed_args"; type: "QVariant" }
        }
        Method {
            name: "call_sync"
            type: "QVariant"
            Parameter { name: "func"; type: "QVariant" }
        }
        Method {
            name: "getattr"
            type: "QVariant"
            Parameter { name: "obj"; type: "QVariant" }
            Parameter { name: "attr"; type: "string" }
        }
        Method { name: "pluginVersion"; type: "string" }
        Method { name: "pythonVersion"; type: "string" }
    }
    Component {
        name: "QPython10"
        prototype: "QPython"
        exports: ["io.thp.pyotherside/Python 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QPython12"
        prototype: "QPython"
        exports: ["io.thp.pyotherside/Python 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QPython13"
        prototype: "QPython"
        exports: ["io.thp.pyotherside/Python 1.3"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QPython14"
        prototype: "QPython"
        exports: ["io.thp.pyotherside/Python 1.4"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QPython15"
        prototype: "QPython"
        exports: ["io.thp.pyotherside/Python 1.5"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QQuickFramebufferObject"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "textureFollowsItemSize"; type: "bool" }
        Property { name: "mirrorVertically"; type: "bool" }
        Signal {
            name: "textureFollowsItemSizeChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "mirrorVerticallyChanged"
            Parameter { type: "bool" }
        }
    }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "float" }
        Property { name: "y"; type: "float" }
        Property { name: "z"; type: "float" }
        Property { name: "width"; type: "float" }
        Property { name: "height"; type: "float" }
        Property { name: "opacity"; type: "float" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "float" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "float" }
        Property { name: "scale"; type: "float" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "float" }
        Property { name: "implicitHeight"; type: "float" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
    }
}
